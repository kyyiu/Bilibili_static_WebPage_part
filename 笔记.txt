基线:
baseline是小写字母x下面的一条线。
linebox主要存在于block元素和inline-block元素中。linebox中可以含有普通文本框、inline-block元素、inline元素。
linebox的baseline以各个元素中最下面的baseline为基准，就是说谁的baseline在最下面，就以谁的baseline为基准进行对齐。
基线移动:
利用bottom
其实linebox的baseline并没有发生移动，只是overflow不能向上溢出，所以强制父元素盒子相对向下移动了(强制把baseline的位置相对向下移动了)
居中对齐弹性盒的各项 <div> 元素：


边框（border）：
分为4个梯形

div
{
    display: flex;
    align-items:center;
}
父级添加相对位置后行内子绝对位置行内元素自动水平居中

文字溢出显示省略号
1:单行
	overflow:hidden;
    text-overflow:ellipsis;
    white-space:nowrap  /*规定段落中的文本不进行换行：*/
2：多行
	overflow: hidden;
	text-overflow: ellipsis;/* 规定当文本溢出时显示省略符号来代表被修剪的文本 */
	-webkit-line-clamp:4;/*用来限制在一个块元素显示的文本的行数,2表示最多显示2行。 为了实现该效果，它需要组合其他的WebKit属性*/
	display: -webkit-box; /*和-webkit-line-clamp结合使用，将对象作为弹性伸缩盒子模型显示*/
	-webkit-box-orient:vertical;/* 和-webkit-line-clamp结合使用 ，设置或检索伸缩盒对象的子元素的排列方式*/
3：利用伪类

伪元素要选对父级

图形字的用法

浮动失效问题：
1.如果第一个div左浮动，第二个div不设置浮动，则会出现浮动问题，第一个div左浮 动，会脱离文档流，第二个div会将第一个div覆盖。
2.将浮动元素设置为绝对定位（position:absolute）时，则会出现浮动失效.
3.当元素设置为display:none;时，无法实现浮动。
4.当元素所在的位置宽度不够时，使用浮动会到下一行。



精灵图坐标以左上角为原点x向右为负

特性盒模型:
display:flex



权重及优先级：
第一等：代表内联样式，如: style=””，权值为1000。

第二等：代表ID选择器，如：#content，权值为100。

第三等：代表类，伪类和属性选择器，如.content，权值为10。

第四等：代表类型选择器和伪元素选择器，如div p，权值为1。

最后把这些值加起来，再就是当前元素的权重了。

权重算出来了，但是某个元素到底用哪个样式，还有3个规则,：

1，如果样式上加有!important标记，例如：

p{ color: gray !important}
那么始终采用这个标记的样式。

2，匹配的内容按照CSS权重排序，权重大的优先；

可以看到，CSS权重只是决定应用哪个样式的其中一个步骤，不过这个步骤是最复杂的，上面已经说过了。

3，如果权重也一样，按照它在CSS样式表里声明的顺序，后声明的优先，例如：

h1 {color: blue}
h1 {color: red}
最终胜出的是color: red。


盒子阴影：box-shadow
box-shadow:none|shadow
box-shadow: h-shadow v-shadow blur spread color inset;
它的值包括 6 个参数：阴影类型，X轴位移，Y轴位移，阴影大小，阴影扩展和阴影颜色。此 6 个参数可以有选择地省略。

浏览器兼容性
Webkit支持：-webkit-box-shadow

Mozilla支持：-moz-box-shadow

IE9支持：box-shadow

IE8及以前：不支持

实用实例
简单效果:
img{

       height:300px;

       -moz-box-shadow:5px 5px;

       -webkit-box-shadow:5px 5px;

       box-shadow:5px 5px;

}

虚阴影效果:
img{

       height:300px;

       -moz-box-shadow:2px 2px 10px #06c;

       -webkit-box-shadow:2px 2px 10px #06c;

       box-shadow:2px 2px 10px #06c;

}

渐变阴影效果:
img{

       height:300px;

       -moz-box-shadow:0 0 10px #06c;

       -webkit-box-shadow:0 0 10px #06c;

       box-shadow:0 0 10px #06c;

}

带光晕效果
img{

       height:300px;

       -moz-box-shadow:0 0 10px 10px #06c;

       -webkit-box-shadow:0 0 10px 10px #06c;

       box-shadow:0 0 10px 10px #06c;

}

内阴影效果
img{

       height:300px;

       -moz-box-shadow:inset 5px 5px 10px #06c;

       -webkit-box-shadow: inset 5px 5px 10px #06c;

       box-shadow: inset 5px 5px 10px #06c;

}

彩色阴影
img{

       height:300px;

       -moz-box-shadow:0 0 10px red,

                                   2px 2px 10px 10px yellow,

                                   4px 4px 12px 12px green;

       -webkit-box-shadow:0 0 10px red,

                                   2px 2px 10px 10px yellow,

                                   4px 4px 12px 12px green;

       box-shadow:0 0 10px red,

                                   2px 2px 10px 10px yellow,

                                   4px 4px 12px 12px green;

}

渐变色:
线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向
径向渐变（Radial Gradients）- 由它们的中心定义
语法  background-image: linear-gradient(direction, color-stop1, color-stop2, ...);
从上到下的线性渐变：

#grad {
    background-image: linear-gradient(#e66465, #9198e5);
}
从左到右的线性渐变：

#grad {
  height: 200px;
  background-image: linear-gradient(to right, red , yellow);
}
从左上角到右下角的线性渐变：

#grad {
  height: 200px;
  background-image: linear-gradient(to bottom right, red, yellow);
}
使用角度
如果你想要在渐变的方向上做更多的控制，你可以定义一个角度，而不用预定义方向（to bottom、to top、to right、to left、to bottom right，等等）。
语法 background-image: linear-gradient(angle, color-stop1, color-stop2);
带有多个颜色结点的从上到下的线性渐变：
#grad {
  background-image: linear-gradient(red, yellow, green);
}
创建一个带有彩虹颜色和文本的线性渐变：

实例
#grad {
  /* 标准的语法 */
  background-image: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet);
}

定位:
TRBL(Top、Right、Bottom、Left )
1、static（静态定位）：默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。

2、relative（相对定位）：生成相对定位的元素，通过top,bottom,left,right的设置相对于其正常（原先本身）位置进行定位。可通过z-index进行层次分级。　　

3、absolute（绝对定位）：生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。可通过z-index进行层次分级。

4、fixed（固定定位）：生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。可通过z-index进行层次分级。

relative

　　定位为relative的元素脱离正常的文本流中，但其在文本流中的位置依然存在。

　　他是默认参照父级的原始点为原始点，无父级则以文本流的顺序在上一个元素的底部为原始点，配合TRBL进行定位，当父级内有padding等CSS属性时，当前级的原始点则参照父级内容区的原始点进行定位，有以下属性：

　　1)如果没有TRBL，以父级的左上角，在没有父级的时候，他是参照浏览器左上角(到这里和absolute第一条一样)，如果在没有父级元素的情况下，存在文本，则以文本的底部为原始点进行定位并将文字断开(和absolut不同)。

　　2)如果设定TRBL，并且父级没有设定position属性，仍旧以父级的左上角为原点进行定位(和absolut不同)。

　　3)如果设定TRBL，并且父级设定position属性(无论是absolute还是relative)，则以父级的左上角为原点进行定位，位置 由TRBL决定(前半段和absolute一样)。如果父级有Padding属性，那么就以内容区域的左上角为原点，进行定位(后半段和absolut不 同)。

　　以上三点可以总结出，无论父级存在不存在，无论有没有TRBL，均是以父级的左上角进行定位，但是父级的Padding属性会对其影响。
　　综合上面对relative的叙述，我们就可以将position属性为relative的DIV视成可以用TRBL进行定位的的普通DIV，或者说 只要将我们平时布局页面的div的CSS属性中加上position:relative后，就不只是用float布局页面了，还可以用TRBL进行布局页 面 了，或者说加上position:relative的DIV也可以像普通的DIV进行布局页面了，只不过还可以用TRBL进行布局页面。但是 position属性为absolute不可以用来布局页面，因为如果用来布局的话，所有的DIV都相对于浏览器的左上角定位了，所以只能用于将某个元素 定位于属性为absolute的元素的内部某个位置。

　　Top的值表示对象相对原位置向下偏移的距离，bottom的值表示对象相对原位置向上偏移的距离，两者同时存在时，只有Top起作用。

　　left的值表示对象相对原位置向右偏移的距离，right的值表示对象相对原位置向左偏移的距离，两者同时存在时，只有left起作用。

absolute
	定位为absolute的层脱离正常文本流，但与relative的区别是其在正常流中的位置不再存在。

	这个属性总是有人给出误导。说当position属性设为absolute后，总是按照浏览器窗口来进行定位的，这其实是错误的。实际上，这是fixed属性的特点。

　　1)如果没有TRBL(top、right、bottom、left)，以父级的左上角，在没有父级的时候，他是参照浏览器左上角,如果在没有父级元素的情况下，存在文本，则以它前面的最后一个文字的右上角为原点进行定位但是不断开文字，覆盖于上方。
　　2)如果设定TRBL，并且父级没有设定position属性，那么当前的absolute则以浏览器左上角为原始点进行定位，位置将由TRBL决定。
　　3)如果设定TRBL，并且父级设定position属性(无论是absolute还是relative)，则以父级的左上角为原点进行定位，位置由 TRBL决定。即使父级有Padding属性，对其也不起作用，说简单点就是：它只坚持一点，就以父级左上角为原点进行定位，父级的padding对其根 本没有影响。 

	以上三点可以总结出，若想把一个定位属性为absolute的元素定位于其父级元素内，只有满足两个条件：

　  第一：设定TRBL
 
 　 第二：父级设定Position属性

　　上面的这个总结非常重要，可以保证你在用absolue布局页面的时候，不会错位，并且随着浏览器的大小或者显示器分辨率的大小，而不发生改变。

　　只要有一点不满足，元素就会以浏览器左上角为原点，这就是初学者容易犯错的一点，已经定位好的板块，当浏览器的大小改变，父级元素会随之改变，但是设 定Position属性为absolute的板块和父级元素的位置发生改变，错位了，这就是因为此时元素以浏览器的右上角为原点的原因。

relative与absolute的主要区别

	首先，是上面已经提到过的在正常流中的位置存在与否。
	
	其次，relative定位的层总是相对于其最近的父元素，无论其父元素是何种定位方式。
	对于absolute定位的层总是相对于其最近的定义为absolute或relative的父层，而这个父层并不一定是其直接父层。如果其父层中都未定义absolute或relative，则其将相对body进行定位
	总结：
	
	　　属性为relative的元素可以用来布局页面，属性为absolute的元素用来定位某元素在父级中的位置，既然属性为absolute的元素用来定位某元素在父级中位置，就少不了TRBL，这时候根据一开始讲的absolute的第三条，如果父级元素没有position属性那么 absolute元素就会脱离父级元素，但是如果是布局页面，父级元素position的属性又不能为absolute，不然就会以浏览器左上角为原点 了，所以父级元素的position属性只能为relative！
	
	　　如果用position来布局页面，父级元素的position属性必须为relative，而定位于父级内部某个位置的元素，最好用 absolute，因为它不受父级元素的padding的属性影响，当然你也可以用position，不过到时候计算的时候不要忘记padding的值
	
	Note : 绝对(absolute)定位对象在可视区域之外会导致滚动条出现。而放置相对(relative)定位对象在可视区域之外，滚动条不会出现。
	
	什么是文档流？
	
	      将窗体自上而下分成一行行, 并在每行中按从左至右的顺序排放元素,即为文档流。
	
	      只有三种情况会使得元素脱离文档流，分别是：浮动绝对定位和相对定位。
	
	z-index属性
	
	       z-index，又称为对象的层叠顺序，它用一个整数来定义堆叠的层次，整数值越大，则被层叠在越上面，当然这是指同级元素间的堆叠，如果两个对象的此属 性具有同样的值，那么将依据它们在HTML文档中流的顺序层叠，写在后面的将会覆盖前面的。需要注意的是，父子关系是无法用z-index来设定上下关系 的，一定是子级在上父级在下。
	
	Note：使用static 定位或无position定位的元素z-index属性是无效的。
	
	
	轮播：
	offsetLeft和style.left的区别
	1.定义:
		offsetLeft: 获取的是当前对象左侧距离父对象左侧的值(均不包含border);
		style.left: 获取或设置相对于具有定位属性(position定义为relative)的父对象的左边距;
		还有个clientLeft:获取的是当前对象的offsetLeft属性值和到当前窗口左边的真实值之间的距离,. 
	2.如果父对象的position定义为relative,子对象的position定义为absolute，
		那么子对象的style.left的值是相对于父对象的值,等同于offsetLeft的值.
	3.区别:
		- style.left 返回的是字符串"50px"，offsetLeft返回的是数值50，
		如果需要对取得的值进行计算，用offsetLeft比较方便,不需要用parseInt(style.left).
		-  style.left是可以设置或更改，offsetLeft是只能获取不能更改的，因此要改变子对象的位置，只能修改style.left的值。
		-  style.left的值需要事先定义,而且要定义相应对象的标签里(即内联style)，就如上面用内嵌style的话，获取不到style.left的值.
		但是offsetLeft则可以取到.
		
		
	解决transition第一次不生效问题:
		left设置初始值,设置初始transition;
		
		
clientX	以浏览器窗口左上顶角为原点，定位 x 轴坐标	所有浏览器，不兼容 Safari
offsetX	以当前事件的目标对象左上顶角为原点，定位 x 轴坐标	所有浏览器，不兼容 Mozilla
pageX	以 document 对象（即文档窗口）左上顶角为原点，定位 x 轴坐标	所有浏览器，不兼容 IE
screenX	计算机屏幕左上顶角为原点，定位 x 轴坐标	所有浏览器
layerX	最近的绝对定位的父元素（如果没有，则为 document 对象）左上顶角为元素，定位 x 轴坐标	Mozilla 和 Safari